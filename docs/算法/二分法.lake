<!doctype lake><meta name="doc-version" content="1" /><meta name="viewport" content="adapt" /><h1 data-lake-id="FkUSM" id="FkUSM"><span data-lake-id="u949db3aa" id="u949db3aa">二分法</span></h1><p data-lake-id="u57e6852e" id="u57e6852e"><span data-lake-id="u16b91606" id="u16b91606">二分法是分治思想的体现，它与分治法的区别在于分治法是将一个复杂的问题不断分解成几个规模更小的子问题，直至子问题可以直接求解；而二分法则是不断地通过比较操作将问题规模缩小一半，直至找到目标元素。</span></p><h2 data-lake-id="LRbvr" id="LRbvr"><span data-lake-id="u6313d88c" id="u6313d88c">解释</span></h2><ul list="uc167dbf7"><li fid="u861a27e6" data-lake-id="u5591ec26" id="u5591ec26"><span data-lake-id="uf93cb112" id="uf93cb112">二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法，可以在数据规模的对数时间复杂度内完成查找。</span></li><li fid="u861a27e6" data-lake-id="u2a932322" id="u2a932322"><span data-lake-id="ue454e096" id="ue454e096">二分查找可以应用于数组，是因为数组具有有随机访问的特点，并且数组是有序的。</span></li><li fid="u861a27e6" data-lake-id="u6cd686d8" id="u6cd686d8"><span data-lake-id="u2c26fd34" id="u2c26fd34">二分查找体现的数学思想是「减而治之」，可以通过当前看到的中间元素的特点推测它两侧元素的性质，以达到缩减问题规模的效果。</span></li></ul><h2 data-lake-id="CqbwE" id="CqbwE"><span data-lake-id="u759e3b9b" id="u759e3b9b">心得</span></h2><ol list="u64cc1ba6"><li fid="ue65826b7" data-lake-id="u9c81a5f3" id="u9c81a5f3"><span data-lake-id="u5e69e404" id="u5e69e404">必须是有序的</span></li><li fid="ue65826b7" data-lake-id="u0085ea3c" id="u0085ea3c"><span data-lake-id="uc2edbb51" id="uc2edbb51">判定条件 left &lt;= right 时执行</span></li><li fid="ue65826b7" data-lake-id="u41c4e1c0" id="u41c4e1c0"><span data-lake-id="ua56f4c7f" id="ua56f4c7f">思路是每次找到 left 和 right 的 中间 mid 值</span></li><li fid="ue65826b7" data-lake-id="ubc432eb3" id="ubc432eb3"><span data-lake-id="u3aeb0190" id="u3aeb0190">如果 mid 与 target 不一致，则根据结果 分别对 left 、right 执行加减</span></li><li fid="ue65826b7" data-lake-id="u8bab49b5" id="u8bab49b5"><span data-lake-id="u8bc6edd8" id="u8bc6edd8">如果遇到插入项的话，则在最后进行判断。</span></li></ol><ol list="u64cc1ba6" data-lake-indent="1"><li fid="u64ce0128" data-lake-id="ub7b23cbc" id="ub7b23cbc"><span data-lake-id="uf101d71c" id="uf101d71c">因为以right进行判断， 最后 while 执行完毕 right 是小于 left 的并且 right 有可能小于 left 的初始值，所以如果 right 小于 left 初始值的话，直接 return 该值。</span></li><li fid="u64ce0128" data-lake-id="ubc17287b" id="ubc17287b"><span data-lake-id="uc3a9232a" id="uc3a9232a">最后 target 插入到哪里，需要对 right 当前值和 target 进行比较判断。</span></li></ol><h2 data-lake-id="dA6PQ" id="dA6PQ"><span data-lake-id="u381e7694" id="u381e7694">例题</span></h2><ul list="u9db29f4a"><li fid="u855174b4" data-lake-id="u639dbbf8" id="u639dbbf8"><a href="https://leetcode.cn/problems/binary-search/description/" target="_blank" data-lake-id="ud7dcec11" id="ud7dcec11"><span data-lake-id="uaab081bf" id="uaab081bf">704.二分查找</span></a></li><li fid="u855174b4" data-lake-id="ua96aada4" id="ua96aada4"><a href="https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/description/" target="_blank" data-lake-id="ueeb9d59c" id="ueeb9d59c"><span data-lake-id="u38909082" id="u38909082">153.寻找旋转排序数组中的最小值</span></a></li><li fid="u855174b4" data-lake-id="ubfdd6caf" id="ubfdd6caf"><a href="https://leetcode.cn/problems/koko-eating-bananas/description/" target="_blank" data-lake-id="u503cd675" id="u503cd675"><span data-lake-id="udc830fbd" id="udc830fbd">爱吃香蕉的珂珂</span></a></li></ul>