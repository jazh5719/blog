<!doctype lake><meta name="doc-version" content="1" /><meta name="viewport" content="adapt" /><h1 data-lake-id="IFOY2" id="IFOY2"><span data-lake-id="u158d765d" id="u158d765d">回溯</span></h1><h2 data-lake-id="xDVzP" id="xDVzP"><span data-lake-id="ubfed32a8" id="ubfed32a8">目录</span></h2><ul list="u9ff8f1ef"><li fid="u9edf1af5" data-lake-id="u8c78517b" id="u8c78517b"><a href="#解释" target="_blank" data-lake-id="u6cd34e0d" id="u6cd34e0d"><span data-lake-id="u9a9b05f5" id="u9a9b05f5">解释</span></a></li><li fid="u9edf1af5" data-lake-id="u249323b2" id="u249323b2"><a href="#一些心得" target="_blank" data-lake-id="u72956707" id="u72956707"><span data-lake-id="ufa40692a" id="ufa40692a">一些心得</span></a></li><li fid="u9edf1af5" data-lake-id="ue0067436" id="ue0067436"><a href="#做过的题" target="_blank" data-lake-id="u33b7aa72" id="u33b7aa72"><span data-lake-id="uc04ac0cd" id="uc04ac0cd">做过的题</span></a></li></ul><h4 data-lake-id="W37Hf" id="W37Hf"><span data-lake-id="uc17c005a" id="uc17c005a">解释</span></h4><p data-lake-id="ufd52b132" id="ufd52b132"><span data-lake-id="ua26df99b" id="ua26df99b">回溯算法是对树形或者图形结构执行一次深度优先遍历，实际上类似枚举的搜索尝试过程，在遍历的过程中寻找问题的解。<br />深度优先遍历有个特点：当发现已不满足求解条件时，就返回，尝试别的路径。此时对象类型变量就需要重置成为和之前一样，称为「状态重置」。<br />许多复杂的，规模较大的问题都可以使用回溯法，有「通用解题方法」的美称。实际上，回溯算法就是暴力搜索算法，它是早期的人工智能里使用的算法，借助计算机强大的计算能力帮助我们找到问题的解。</span></p><h4 data-lake-id="QnHZ8" id="QnHZ8"><span data-lake-id="uf34d57fb" id="uf34d57fb">一些心得</span></h4><p data-lake-id="uaf0b2e70" id="uaf0b2e70"><span data-lake-id="u4c50a1be" id="u4c50a1be">1.一般回溯模板套路</span></p><ol list="u28db3be4"><li fid="u1ea24ea5" data-lake-id="ub2e47b87" id="ub2e47b87"><span data-lake-id="uc4e7c4ce" id="uc4e7c4ce">添加枝剪</span></li></ol><p data-lake-id="u85a4d2ed" id="u85a4d2ed"><span data-lake-id="u6de64b87" id="u6de64b87">1.限制 path 中使用过的元素在出现 —— 在进入下一次递归前加map限制</span></p><p data-lake-id="u300178da" id="u300178da"><span data-lake-id="ud81e1459" id="ud81e1459">1.限制同级中在出现相同的字符 —— for循环之前添加map限制</span></p><p data-lake-id="ue89df8b8" id="ue89df8b8"><span data-lake-id="u7eb5f741" id="u7eb5f741">1.已排序的数组不出现 </span><span data-lake-id="ua3783c4c" id="ua3783c4c">[</span><span data-lake-id="udfceb254" id="udfceb254">1,2] </span><span data-lake-id="u774b9866" id="u774b9866">[</span><span data-lake-id="uc8ccf815" id="uc8ccf815">2,1] 这种情况 —— 通过index限制</span></p><ol list="uf5c98cee"><li fid="ua6f65ab7" data-lake-id="u8b76abaa" id="u8b76abaa"><span data-lake-id="ud6b9bfe2" id="ud6b9bfe2">一般情况下回溯是为了记录整过程产生的每一条记录，暴力搜索嘛。如果不需要过程只需要结果可以参考动态规划</span></li></ol><h4 data-lake-id="Kt62s" id="Kt62s"><span data-lake-id="u9d4ac121" id="u9d4ac121">做过的题</span></h4><p data-lake-id="ub527fb5d" id="ub527fb5d"><span data-lake-id="ud65814e2" id="ud65814e2">17.电话号码的字母组合</span></p><p data-lake-id="u4cbf6ec1" id="u4cbf6ec1"><span data-lake-id="u1ecf2696" id="u1ecf2696">22.括号生成</span></p><h5 data-lake-id="eC6QG" id="eC6QG"><span data-lake-id="ud3a05526" id="ud3a05526">39.组合总和</span></h5><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22hideToolbar%22%3Atrue%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20combinationSum1(candidates%2C%20target)%20%7B%5Cn%20%20%20%20const%20ret%20%3D%20%5B%5D%5Cn%20%20%20%20const%20path%20%3D%20%5B%5D%5Cn%20%20%20%20let%20sum%20%3D%200%5Cn%20%20%20%20function%20fn(index)%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(sum%20%3E%20target)%20return%5Cn%20%20%20%20%20%20%20%20if%20(sum%20%3D%3D%3D%20target)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ret.push(path.slice())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20for%20(let%20i%20%3D%20index%3B%20i%20%3C%20candidates.length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20const%20item%20%3D%20candidates%5Bi%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20path.push(item)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20sum%20%2B%3D%20item%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20fn(i)%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20sum%20-%3D%20item%5Cn%20%20%20%20%20%20%20%20%20%20%20%20path.pop()%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20fn(0)%5Cn%20%20%20%20return%20ret%5Cn%7D%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22nj3VJ%22%7D"></card><p data-lake-id="u6a67fc88" id="u6a67fc88"><br></p><h6 data-lake-id="gv1PH" id="gv1PH"><span data-lake-id="uec532909" id="uec532909">40.组合总和 II</span></h6><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22hideToolbar%22%3Atrue%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20combinationSum2%20%3D%20function%20(candidates%2C%20target)%20%7B%5Cn%20%20%20%20const%20list%20%3D%20candidates.sort((a%2C%20b)%20%3D%3E%20a%20-%20b)%5Cn%20%20%20%20const%20ret%20%3D%20%5B%5D%5Cn%20%20%20%20const%20path%20%3D%20%5B%5D%5Cn%20%20%20%20let%20sum%20%3D%200%5Cn%5Cn%20%20%20%20function%20fn(index)%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(sum%20%3E%20target)%20return%5Cn%20%20%20%20%20%20%20%20if%20(sum%20%3D%3D%3D%20target)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ret.push(path.slice())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BD%BF%E7%94%A8map%E7%BC%93%E5%AD%98%E5%90%8C%E7%BA%A7%E5%B7%B2%E4%BD%BF%E7%94%A8%E8%BF%87%E7%9A%84%E6%95%B0%E6%8D%AE%20%7C%7C%20%E7%94%A8%E6%9D%A1%E4%BB%B6%E9%99%90%E5%88%B6%5Cn%20%20%20%20%20%20%20%20%2F%2F%20const%20map%20%3D%20new%20Map()%5Cn%20%20%20%20%20%20%20%20for%20(let%20i%20%3D%20index%3B%20i%20%3C%20list.length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20const%20item%20%3D%20list%5Bi%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(i%20%3E%20index%20%26%26%20item%20%3D%3D%3D%20list%5Bi%20-%201%5D)%20continue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20if%20(map.has(item))%20continue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20map.set(item)%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20path.push(item)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20sum%20%2B%3D%20item%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20fn(i%20%2B%201)%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20sum%20-%3D%20item%5Cn%20%20%20%20%20%20%20%20%20%20%20%20path.pop()%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20fn(0)%5Cn%20%20%20%20return%20ret%5Cn%7D%3B%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22vBqTQ%22%7D"></card><p data-lake-id="uac1c76a5" id="uac1c76a5"><br></p><h5 data-lake-id="qGkVH" id="qGkVH"><span data-lake-id="uf8ce69d0" id="uf8ce69d0">46.全排列</span></h5><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22hideToolbar%22%3Atrue%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20permute%20%3D%20function%20(nums)%20%7B%5Cn%20%20%20%20const%20path%20%3D%20%5B%5D%5Cn%20%20%20%20const%20ret%20%3D%20%5B%5D%5Cn%20%20%20%20const%20map%20%3D%20new%20Map()%5Cn%20%20%20%20function%20dfs()%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(path.length%20%3D%3D%3D%20nums.length)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ret.push(path.slice())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%20nums.length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(map.has(i))%20continue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20path.push(nums%5Bi%5D)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20map.set(i)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20dfs()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20map.delete(i)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20path.pop()%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20dfs(0)%5Cn%20%20%20%20return%20ret%5Cn%7D%3B%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22HSsqB%22%7D"></card><p data-lake-id="u81d4f898" id="u81d4f898"><br></p><h5 data-lake-id="WO0vM" id="WO0vM"><span data-lake-id="ud1218e07" id="ud1218e07">47.全排列 II</span></h5><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22hideToolbar%22%3Atrue%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20permuteUnique%20%3D%20function%20(nums)%20%7B%5Cn%20%20%20%20const%20path%20%3D%20%5B%5D%5Cn%20%20%20%20const%20ret%20%3D%20%5B%5D%5Cn%20%20%20%20const%20map%20%3D%20new%20Map()%5Cn%20%20%20%20function%20dfs()%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(path.length%20%3D%3D%3D%20nums.length)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ret.push(path.slice())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20const%20indexMap%20%3D%20new%20Map()%5Cn%20%20%20%20%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%20nums.length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(map.has(i))%20continue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(indexMap.has(nums%5Bi%5D))%20continue%5Cn%20%20%20%20%20%20%20%20%20%20%20%20path.push(nums%5Bi%5D)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20map.set(i)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20indexMap.set(nums%5Bi%5D)%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20dfs()%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20map.delete(i)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20path.pop()%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20dfs()%5Cn%20%20%20%20return%20ret%5Cn%7D%3B%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Ux0jy%22%7D"></card><p data-lake-id="uc3219101" id="uc3219101"><br></p><p data-lake-id="u1132e46f" id="u1132e46f"><span data-lake-id="u06c6b57f" id="u06c6b57f">77.组合</span></p><p data-lake-id="ubf5659c6" id="ubf5659c6"><span data-lake-id="u5fd619d4" id="u5fd619d4">78.子集</span></p><p data-lake-id="u8eb47c89" id="u8eb47c89"><span data-lake-id="u460dc1f8" id="u460dc1f8">79.单词搜索</span></p><p data-lake-id="ud4b293bd" id="ud4b293bd"><span data-lake-id="u32a77c4b" id="u32a77c4b">90.子集 II</span></p><p data-lake-id="u75e643bb" id="u75e643bb"><span data-lake-id="u79f17f6b" id="u79f17f6b">1863.找出所有子集的异或总和</span></p>