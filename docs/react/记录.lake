<!doctype lake><meta name="doc-version" content="1" /><meta name="viewport" content="adapt" /><h2 data-lake-id="TRrID" id="TRrID"><span data-lake-id="uc5666a62" id="uc5666a62">渲染过程</span></h2><p data-lake-id="u02bffaba" id="u02bffaba"><a href="https://blog.csdn.net/aXin_li/article/details/138656291" target="_blank" data-lake-id="u21e67902" id="u21e67902"><span data-lake-id="ub42bbef9" id="ub42bbef9">https://blog.csdn.net/aXin_li/article/details/138656291</span></a></p><p data-lake-id="u3e571ee0" id="u3e571ee0"><span data-lake-id="u42f17965" id="u42f17965">分为两个过程</span></p><ul list="ue598e5c2"><li fid="u7c806b76" data-lake-id="u1c8c4895" id="u1c8c4895"><span data-lake-id="u4bde1f50" id="u4bde1f50">render阶段：调和虚拟dom，计算出虚拟dom</span></li></ul><ul list="ue598e5c2" data-lake-indent="1"><li fid="u2362970a" data-lake-id="u217ea6f4" id="u217ea6f4"><span data-lake-id="u77ef0ef3" id="u77ef0ef3">调度器</span></li><li fid="u2362970a" data-lake-id="u838e9e14" id="u838e9e14"><br></li></ul><ul list="ue598e5c2" start="2"><li fid="u7c806b76" data-lake-id="uab818c5f" id="uab818c5f"><span data-lake-id="uaf6341aa" id="uaf6341aa">commit阶段：根据上一步计算出来的虚拟 DOM，渲染具体的 UI</span></li></ul><ul list="ue598e5c2" data-lake-indent="1"><li fid="u756ff1b0" data-lake-id="u9f6f3911" id="u9f6f3911"><span data-lake-id="uc3b2a959" id="uc3b2a959">渲染器</span></li></ul><p data-lake-id="u41592f4b" id="u41592f4b"><br></p><h2 data-lake-id="kc9cx" id="kc9cx"><span data-lake-id="ub794401e" id="ub794401e">useCallBack和useMemo</span></h2><p data-lake-id="u7aad004c" id="u7aad004c"><span data-lake-id="u98884473" id="u98884473">1.首先两个api都是为了做缓存的。<br />2.背景：因为react hooks组件只有一个函数，每次重新渲染的时候整个组件都会重新执行一次。会导致所有函数、计算结果都会销毁然后重新注册，就可能会重复执行一些逻辑。所以这两个api是为了做缓存用的<br />3.解释：<br />    useCallBack是对函数的缓存，它的第二个参数，依赖没有变更时，返回的就是之前注册好的函数，如果依赖有变更则会把之前的销毁，重新创建函数<br />    useMemo是对计算结果的缓存，他返回的不是函数，而是第一个函数return的内容。依赖变更的时候才会重新执行函数进行计算。</span></p><p data-lake-id="uf8343647" id="uf8343647"><br></p><h2 data-lake-id="TVWFr" id="TVWFr"><span data-lake-id="u0ac23feb" id="u0ac23feb">usehook复用逻辑</span></h2><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22tsx%22%2C%22code%22%3A%22import%20%7B%20useState%2C%20useEffect%20%7D%20from%20'react'%5Cnconst%20useOnlineStatus%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20const%20%5BisOnline%2C%20setIsOnline%5D%20%3D%20useState(true)%3B%5Cn%20%20%20%20useEffect(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20function%20handleOnline()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20setIsOnline(true)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20function%20handleOffline()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20setIsOnline(false)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20window.addEventListener('online'%2C%20handleOnline)%3B%5Cn%20%20%20%20%20%20%20%20window.addEventListener('offline'%2C%20handleOffline)%3B%5Cn%20%20%20%20%20%20%20%20return%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20window.removeEventListener('online'%2C%20handleOnline)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20window.removeEventListener('offline'%2C%20handleOffline)%3B%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%7D%2C%20%5B%5D)%3B%5Cn%20%20%20%20return%20isOnline%3B%5Cn%7D%5Cn%5Cnexport%20default%20useOnlineStatus%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Atrue%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22customStyle%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22lQzP1%22%7D"></card>